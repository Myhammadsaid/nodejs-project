const path = require('path')
const filePath = '/home/alex/Projects/node-course/files/report.pdf'

// console.log(path.basename(filePath))
// console.log(path.dirname(filePath))
// console.log(path.extname(filePath))
// console.log(path.join(__dirname, 'index.js'))
// console.log(path.join(__filename, 'index.js'))
// console.log(path.resolve(__dirname, 'start', 'index.js'))
// console.log(path.resolve(__filename, 'start', 'index.js'))

// const pathUser = {
// 	basename: path.basename(filePath),
// 	extname: path.extname(filePath),
// 	dirname: path.dirname(filePath),
// 	resolve: path.resolve(path.dirname(filePath), '../../logs/error.log'),
// }

// console.log(pathUser)

// const pathDemo = process.argv[2]

// if (pathDemo === '--help' || !pathDemo) {
// 	console.log(`–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
//   node path-demo.js <–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É>

// –û–ø–∏—Å–∞–Ω–∏–µ:
//   –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ä–∞–∑–±–∏—Ä–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É, –≤—ã–≤–æ–¥–∏—Ç –µ–≥–æ –∏–º—è, —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏ –ø–∞–ø–∫—É.
//   –ó–∞—Ç–µ–º —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π –ø—É—Ç—å –∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .bak

// –ü—Ä–∏–º–µ—Ä:
//   node path-demo.js /home/user/data/info.txt
// `)
// 	process.exit(0)
// }

// let parsed = path.parse(pathDemo)

// console.log(`
// –ò–º—è —Ñ–∞–π–ª–∞: ${parsed.base}
// –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ: ${parsed.ext}
// –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –ø–∞–ø–∫–∞: ${parsed.dir}
// –ü—É—Ç—å –∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: ${path.join(parsed.dir, parsed.name + '.bak')}
// `)

const myURL = new URL(
	'https://example.com:8080/path/page.html?user=alex&age=30#bio'
)

// console.log(myURL)
// console.log(myURL.host)

// for (const [key, value] of myURL.searchParams) {
// 	console.log(key, value)
// }

// –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ:
// console.log(myURL.searchParams.get('user'))
// –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä:
// myURL.searchParams.append('token', '123')
// console.log(myURL)
// —É–¥–∞–ª–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä:
// myURL.searchParams.delete('age')
// console.log(myURL)
// –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ:
// console.log(myURL.searchParams.has('user'))

// const url = new URL(
// 	'https://github.com/user123/project?sort=stars&lang=javascript#readme'
// )

// url.searchParams.set('sort', 'updated')

// console.log(
// 	`
// 	Protocol: ${url.protocol}
// 	Domen: ${url.hostname}
// 	Path: ${url.pathname}
// 	Search: ${url.search}
// 	Hash: ${url.hash ? url.hash : '–•–µ—à–∞ –Ω–µ—Ç—É –≤ —Å—Å—ã–ª–∫–µ'}
// 	Lang: ${url.searchParams.get('lang')}
// 	`
// )

// console.log('Full path: ', url.href)

// const url = new URL(
// 	'https://api.example.com/v1/users?page=5&limit=20&token=abc123'
// )

// url.searchParams.append('sort', 'desc')
// url.searchParams.delete('token')

// console.log(
// 	`
// 	Protocol: ${url.protocol}
// 	Domen: ${url.hostname}
// 	Path: ${url.pathname}
// 	Query: ${url.search}
// 	Page: ${url.searchParams.get('page')}
// 	`
// )

// console.log('FullPath: ', url.href)

const fs = require('fs')

// fs.writeFile('notes/foo.txt', 'Test for writeFile --> fs', err => {
// 	if (err) throw err
// 	console.log('–§–∞–π–ª —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω')
// })

// fs.readFile('notes/foo.txt', 'utf-8', (err, data) => {
// 	if (err) throw err
// 	console.log('–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –≤ —Å–µ–±–µ: ', data)
// })

// let text = '\nbla bla bla...'

// fs.appendFile('notes/foo.txt', text, err => {
// 	if (err) throw err
// 	console.log('–í —Ñ–∞–π–ª –±—ã–ª –∑–∞–ø–∏—Å–∞–Ω —Ç–µ–∫—Å—Ç: ', text)
// })

// for (let i = 0; i < 100; i++) {
// 	fs.appendFile('notes/foo.txt', '\nbla bla bla...', err => {
// 		if (err) throw err
// 	})
// }

// fs.unlink('notes/foo.txt', err => {
// 	if (err) throw err
// 	console.log('–§–∞–π–ª –±—ã–ª —É–¥–∞–ª–µ–Ω')
// })

// fs.mkdir('example', err => {
// 	if (err) throw err
// 	console.log('–ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω')
// })

// fs.readdir('notes', (err, list) => {
// 	if (err) throw err
// 	console.log('–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤:')
// 	list?.forEach(file => {
// 		console.log(`--${file}`)
// 	})
// })

// fs.rmdir('example', err => {
// 	if (err) throw err
// 	console.log('–ü–∞–ø–∫–∞ –±—ã–ª —É–¥–∞–ª–µ–Ω')
// })

// fs.mkdir('test', err => {
// 	if (err) {
// 		console.log('–¢–∞–∫–æ–π –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
// 	} else {
// 		console.log('–ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω')
// 	}
// })

// let text = 'foo, this is a test file!'
// fs.writeFile('test/message.txt', text, err => {
// 	if (err) throw err
// 	let append = '\nThis line was appended.'
// 	fs.appendFile('test/message.txt', append, err => {
// 		if (err) throw err
// 		fs.readFile('test/message.txt', 'utf-8', (err, data) => {
// 			if (err) throw err
// 			console.log('–°–æ–¥–µ—Ä–∂–∏–º—ã–π —Ñ–∞–π–ª–∞:\n', data)
// 			console.log('–î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞', data.toString().length)
// 		})
// 	})
// })

// fs.readdir('test', (err, list) => {
// 	if (err) throw err
// 	let count1 = 0
// 	let count2 = 0
// 	list?.forEach(file => {
// 		if (path.extname(file) === '.txt') {
// 			count1++
// 			console.log(`-- ${file}`)
// 		} else {
// 			count2++
// 		}
// 	})
// 	console.log('–í—Å–µ–≥–æ .txt —Ñ–∞–π–ª–æ–≤:', count1)
// 	console.log('–í—Å–µ–≥–æ –Ω–µ .txt —Ñ–∞–π–ª–æ–≤:', count2)
// })

// const os = require('os')

// console.log(os.platform())
// console.log(os.arch())
// console.log(os.hostname())
// console.log(os.type())
// const cpus = os.cpus()

// cpus.forEach((cpus, index) => {
// 	console.log(`–Ø–¥—Ä–æ ${index + 1}: ${cpus.model} - ${cpus.speed}`)
// })

// console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–¥–µ—Ä: ${cpus.length}`)

// let argvs = process.argv.slice(2)

// let text = `–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
//   node url-demo.js <url> [--add-param=–∫–ª—é—á=–∑–Ω–∞—á–µ–Ω–∏–µ]

// –û–ø–∏—Å–∞–Ω–∏–µ:
//   –°–∫—Ä–∏–ø—Ç —Ä–∞–∑–±–∏—Ä–∞–µ—Ç URL, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –µ–≥–æ —á–∞—Å—Ç–∏ –∏ query-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã.
//   –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π query-–ø–∞—Ä–∞–º–µ—Ç—Ä —á–µ—Ä–µ–∑ --add-param.

// –ü—Ä–∏–º–µ—Ä:
//   node url-demo.js "https://example.com/page?user=alex" --add-param=lang=ru`

// if (!argvs.length || argvs[0] === '--help') {
// 	console.log(text)
// 	process.exit(0)
// }

// let url = new URL(argvs[0])
// argvs.slice(1)?.forEach(item => {
// 	if (item.startsWith('--add-param=')) {
// 		let key = item.split('=')[1]
// 		let value = item.split('=')[2]
// 		url.searchParams.append(key, value)
// 	} else {
// 		console.log(text)
// 		process.exit(0)
// 	}
// })

// console.log(
// 	`
// 		Protocol: ${url.protocol}
// 	 	Domen: ${url.hostname}
// 	 	Port: ${url.port}
//  		Path: ${url.pathname}
//  		Hash: ${url.hash ? url.hash : '–•–µ—à –Ω–µ—Ç—É –≤ —Å—Å—ã–ª–∫–µ'}
//  		Query: ${url.search}
// 		`
// )

// üîπ –ß–∞—Å—Ç—å 2 ‚Äî –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
// const args = [
// 	'--env=production',
// 	'--config=db.json',
// 	'--verbose',
// 	'--config=server.json',
// 	'--mode=dev',
// ]
// const result = []
// args.forEach(item => {
// 	if (item.startsWith('--config=')) {
// 		result.push(item.split('=')[1])
// 	}
// })
// console.log(result)

const Emitter = require('events')
const emitter = new Emitter()

// function isName(name = 'World!') {
// 	console.log(`Hello, ${name}`)
// }

// emitter.on('listener', isName)
// // emitter.off('listener', isName) // —Å–Ω—è—Ç—å —Å–ª—É—à–∞—Ç–µ–ª—è.
// emitter.emit('listener', 'Mike')

// emitter.once('foo', isName)
// emitter.emit('foo') // —Å—Ä–∞–±–æ—Ç–∞–µ—Ç
// emitter.emit('foo') // –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç

// // emitter.removeListener('listener', isName) // —Å—Ç–∞—Ä–æ–µ –∏–º—è (—Ä–∞–±–æ—Ç–∞–µ—Ç –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ).
// emitter.emit('listener', 'Mike')

// emitter.on('name', isName)

// // emitter.removeAllListeners(['name'])
// emitter.emit('listener', 'Mike')
// emitter.emit('name', 'John')

// console.log(emitter.listenerCount('listener'))
// console.log(emitter.eventNames())
// console.log(emitter.listeners('name'))

// emitter.on('ping', () => console.log('pong'))
// emitter.emit('ping')

// emitter.on('sum', (a, b) => console.log(a + b))
// emitter.emit('sum', 4, 5)

// emitter.on('hello', name => console.log(`Hello, ${name}`))
// emitter.emit('hello', '–ê–ª–µ–∫—Å')

// emitter.once('login', user => console.log(`${user} –≤–æ—à—ë–ª –≤ —Å–∏—Å—Ç–µ–º—É`))
// emitter.emit('login', 'john')
// // emitter.emit('login', 'john')

// emitter.on('data', str => console.log(`–¥–ª–∏–Ω–∞: ${str.length}`))
// emitter.on('data', str => console.log(str.toUpperCase()))
// emitter.emit('data', 'nodejs')

// function removeListener(arr) {
// 	let inx = arr?.indexOf('data')
// 	if (inx !== -1) {
// 		const listeners = emitter.listeners(arr[inx])
// 		for (const fn of listeners) {
// 			emitter.off(arr[inx], fn)
// 		}
// 	}
// }
// emitter.on('off', removeListener)
// emitter.emit('off', emitter.eventNames())

// let count = 0
// function message(str) {
// 	if (str) {
// 		count++
// 		if (count > 4) {
// 			console.log('\n–õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Å—Ç–µ–∫!')
// 			return
// 		}
// 		console.log(`üì© –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: ${str}`)
// 		console.log(`–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${count}`)
// 	} else {
// 		console.log('–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
// 	}
// }

// emitter.on('message', message)
// emitter.emit('message', '–ü—Ä–∏–≤–µ—Ç')
// emitter.emit('message', '–ö–∞–∫ –¥–µ–ª–∞?')
// emitter.emit('message', '–í—Å—ë —Ö–æ—Ä–æ—à–æ')
// emitter.emit('message', 'bla bla bla...')
// emitter.emit('message', 'bla bla bla...')
// emitter.removeAllListeners('message')
// emitter.emit('message', '–í—Å—ë —Ö–æ—Ä–æ—à–æ')

// const readable = fs.createReadStream('./test/message.txt', {
// 	encoding: 'utf-8',
// highWaterMark: 16 // —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞ (–ø–æ 16 –±–∞–π—Ç)
// })

// readable.on('data', chunk => {
// 	console.log(chunk)
// })

// readable.on('end', () => console.log('\n–ß—Ç–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ'))

// const writable = fs.createWriteStream('./test/foo.txt')
// writable.write('–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞\n')
// writable.write('–í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞\n')
// writable.end('üëâ –ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n')

// const copy = fs.createWriteStream('./test/package.txt')
// readable.pipe(copy)

// for (let i = 0; i < 10; i++) {
// 	fs.appendFile('./test/input.txt', 'datadatadatadata\n', err => {
// 		if (err) throw err
// 	})
// }

// const inputfile = fs.createReadStream('./test/input.txt', {
// 	encoding: 'utf-8',
// })

// inputfile.on('data', chunk => {
// 	if (chunk.length) {
// 		console.log(chunk)
// 		console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ: ${chunk.length}`)
// 	} else {
// 		console.log('–§–∞–π–ª –ø—É—Å—Ç')
// 		process.exit(0)
// 	}
// })

// inputfile.on('end', () => console.log('\n–ß—Ç–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ'))

// const copyfile = fs.createWriteStream('./test/output.txt')

// inputfile.pipe(copyfile)

// const lengthFile = fs.createReadStream('./test/input.txt', {
// 	encoding: 'utf-8',
// })

// const appendFIle = fs.createWriteStream('./test/output.txt')

// lengthFile.on('data', chunk => {
// 	if (chunk.length) {
// 		let num = 0
// 		let chunks = chunk.split('\n')
// 		chunks.forEach(item => {
// 			if (item) {
// 				num++
// 				appendFIle.write(`${num}: ${item}\n`)
// 			}
// 		})
// 	} else {
// 		console.log('–§–∞–π–ª –ø—É—Å—Ç')
// 		process.exit(0)
// 	}
// })
